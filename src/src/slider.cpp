#include "../include/slider.h"
#include "../include/image.h"
#include "../include/resourcemanager.h"
#include "../include/renderer.h"


//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
Slider::Slider()
{

}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
bool Slider::init( const String name, const Vector2& position, const String& barImage, const String& pivotImage, const double min, const double max, const double step, const String& disabledPivotImage, const int32 depth )
{
	m_name				= name;
	m_position			= position;
	m_min				= min;
	m_max				= max;
	m_step				= step;
	m_barImage			= ResourceManager::Instance().LoadImage( barImage );
	m_size				= Vector2( (float)m_barImage->GetWidth(), (float)m_barImage->GetHeight() );

	m_pivot				= new Pivot();
	m_pivot->init( "pivot of " + name, Vector2(), pivotImage, (double)min, (double)max, (double)step, disabledPivotImage );
	m_pivot->setParent( this );

	if ( !m_barImage )
		return false;
	
	return true;
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::update()
{

}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::render()
{
	if ( m_barImage && m_visible )
	{
		Vector2 pos = getAbsolutePosition();

		Renderer::Instance().SetBlendMode( Renderer::ALPHA );
		Renderer::Instance().DrawImage( m_barImage, (double)pos.x, (double)pos.y, 0, m_barImage->GetWidth() * m_scalex, m_barImage->GetHeight() * m_scaley );
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::onInputEvent( const Message& message )
{
	if ( m_enabled )
	{
		switch( message.type )
		{
			case mtPointerButtonUp:
				NOTIFY_LISTENERS( onClick( this ) );
				break;
		}
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::setHandle( int32 handlex, int32 handley )
{
	if ( m_barImage )
		m_barImage->SetHandle( handlex, handley );
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::setMidHandle()
{
	if ( m_barImage )
		m_barImage->SetMidHandle();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
Vector2 Slider::getHandle() const
{
	if ( m_barImage )
		return Vector2( (float)m_barImage->GetHandleX(), (float)m_barImage->GetHandleY() );

	return Vector2();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::destroy()
{

}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
double Slider::getValue() const
{
	return m_pivot->getValue();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::setHorizontal()
{
	m_pivot->setEnabledAxes( true, false );
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::setVertical()
{
	m_pivot->setEnabledAxes( false, true );
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
Slider::Pivot::Pivot()
{
	setDragable( true );
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
bool Slider::Pivot::init( const String name, const Vector2& position, const String& pivotImage, double &min, double &max, double &step, const String& disabledPivotImage )
{
	m_name						= name;
	m_position					= position;
	m_pivotImage				= ResourceManager::Instance().LoadImage( pivotImage );
	m_disablePivotImage			= ResourceManager::Instance().LoadImage( disabledPivotImage );
	m_size						= Vector2( (float)m_pivotImage->GetWidth(), (float)m_pivotImage->GetHeight() );
	m_min						= min;
	m_max						= max;
	m_step						= step;

	setEnabledAxes( true, false ); // Horizontal slider by default
	setMidHandle();

	if ( !m_pivotImage )
		return false;

	if ( !m_disablePivotImage )
		m_disablePivotImage = m_pivotImage;

	return true;
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::update()
{
	if ( !m_pointerIsOver )
		m_dragging = false;
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::render()
{
	if ( m_pivotImage && m_visible )
	{
		Vector2 pos = getAbsolutePosition();

		Renderer::Instance().SetBlendMode( Renderer::ALPHA );
		if ( m_enabled )
			Renderer::Instance().DrawImage( m_pivotImage, pos.x, pos.y, 0, m_pivotImage->GetWidth() * m_scalex, m_pivotImage->GetHeight() * m_scaley );
		else
			Renderer::Instance().DrawImage( m_disablePivotImage, pos.x, pos.y, m_disablePivotImage->GetWidth() * m_scalex, m_disablePivotImage->GetHeight() * m_scaley );
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::onInputEvent( const Message& message )
{
	if ( m_enabled )
	{
		DragableControl::onInputEvent( message );
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::setHandle( int32 handlex, int32 handley )
{
	if ( m_pivotImage )
		m_pivotImage->SetHandle( handlex, handley );
	if ( m_disablePivotImage )
		m_disablePivotImage->SetHandle( handlex, handley );
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::setMidHandle()
{
	if ( m_pivotImage )
		m_pivotImage->SetMidHandle();
	if ( m_disablePivotImage )
		m_disablePivotImage->SetMidHandle();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
Vector2 Slider::Pivot::getHandle() const
{
	if ( m_pivotImage )
		return Vector2( (float)m_pivotImage->GetHandleX(), (float)m_pivotImage->GetHandleY() );

	return Vector2();
}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
void Slider::Pivot::destroy()
{

}

//------------------------------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------------------------------
double Slider::Pivot::getValue() const
{
	return m_value;
}